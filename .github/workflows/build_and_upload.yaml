name: Build&Upload

on:
  workflow_dispatch:
  release:
    types: [published]

env:
  Python_Version: '3.10'


jobs:
  build_sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: ${{env.Python_Version}}
      - name: Install dependencies 
        run: |
           pip install --upgrade pip wheel setuptools build 
      - name: Build sdist
        run: |
          python -m build --sdist --outdir ./dist
      - uses: actions/upload-artifact@v3
        with:
          name: WHEEL
          path: dist/*.tar.gz
          retention-days: 30
          
  build_wheels_linux_x86_64:
    name: Build wheels linux x86_64
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux_2_28_x86_64:latest
    strategy:
      fail-fast: false 
      matrix:  
        python-version: ['37', '38', '39', '310']
               
    steps:
      - uses: actions/checkout@v3       
      - name: Get Python Version
        shell: bash
        run: |
          set -eux
          /opt/python/cp${{matrix.python-version}}-cp${{matrix.python-version}}/bin/python --version > python_version.txt
          cat python_version.txt
      - name: Pip-Tools 
        shell: bash
        run: |
          /opt/python/cp${{matrix.python-version}}-cp${{matrix.python-version}}/bin/python -m pip install pip-tools 
          pip-compile
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            /var/cache/dnf/
          key: ${{ runner.os }}-intel-${{ hashFiles('python_version.txt') }}-${{ hashFiles('requirements.txt') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-intel-${{ hashFiles('python_version.txt') }}-${{ hashFiles('requirements.txt') }}-${{ github.sha }}
            ${{ runner.os }}-intel-${{ hashFiles('python_version.txt') }}-${{ hashFiles('requirements.txt') }}
            ${{ runner.os }}-intel-${{ hashFiles('python_version.txt') }}
            ${{ runner.os }}-intel-
      - name: Install Dependencies
        shell: bash
        run: |
          set -eux
          pip-sync requirements.txt 
      - name: Setup Intel oneAPI
        run: |
          set -eux
        
      - name: Instal Intel oneAPI    
        run: |
          set -eux
          sudo apt-get install -y intel-basekit intel-hpckit
      - name: Install Dependency 
        run: |
          sudo apt-get install -y libeigen3-dev
          /opt/python/cp${{matrix.python-version}}-cp${{matrix.python-version}}/bin/python -m pip install --upgrade pip cmake ninja wheel setuptools build scikit-build auditwheel
      - name: Build 
        run: |
          set -eux
          . /opt/intel/oneapi/setvars.sh
          export CIBUILDWHEEL=1
          /opt/python/cp${{matrix.python-version}}-cp${{matrix.python-version}}/bin/python -m auditwheel -h
          /opt/python/cp${{matrix.python-version}}-cp${{matrix.python-version}}/bin/python -m build --wheel --outdir ./dist
      - name: Show Files ${{matrix.CIBW_BUILD}}
        id: wheel
        shell: bash
        run: |
          set -eux
          du -a ./dist
          cd dist
          for f in *.whl; do /opt/python/cp${{matrix.python-version}}-cp${{matrix.python-version}}/bin/python -m auditwheel repair -w ../wheelhouse $f; done    
      - uses: actions/upload-artifact@v3
        with:
          name: WHEEL
          path: ./wheelhouse/*.whl
          retention-days: 30 
          
  build_wheels_linux_aarch64:
    name: Build wheels linux aarch64
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false 
      matrix:  
        include:
          - os: ubuntu-latest
            arch: aarch64
            CIBW_PLATFORM: linux 
            CIBW_ENVIRONMENT: ""
            CIBW_BEFORE_ALL_LINUX: >
               dnf config-manager --set-enabled powertools &&
               dnf makecache --refresh &&
               dnf -y --enablerepo=powertools install openblas-static &&
               dnf -y --enablerepo=powertools install lapack-static &&
               dnf -y install gcc-toolset-11 &&
               dnf -y --enablerepo=powertools install eigen3-devel
            CIBW_BEFORE_BUILD_LINUX: >
               source scl_source enable gcc-toolset-11 &&
               pip install pybind11 cmake ninja
    steps:
      - uses: actions/checkout@v3       
      - name: Set up QEME
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
            install: true
      - name: Build wheels on ${{ matrix.CIBW_PLATFORM }} ${{matrix.arch}}
        uses: pypa/cibuildwheel@2.7.0
        env:
          CIBW_ENVIRONMENT: ${{ matrix.CIBW_ENVIRONMENT }}
          CIBW_PLATFORM:  ${{ matrix.CIBW_PLATFORM }}
          CIBW_ARCHS: ${{matrix.arch}}
          CIBW_BEFORE_ALL_LINUX: ${{ matrix.CIBW_BEFORE_ALL_LINUX }}
          CIBW_BEFORE_BUILD_LINUX: ${{ matrix.CIBW_BEFORE_BUILD_LINUX }}
          CIBW_PROJECT_REQUIRES_PYTHON: ">=3.7"
      - uses: actions/upload-artifact@v3
        with:
          name: WHEEL
          path: ./wheelhouse/*.whl
          retention-days: 30 
          
  build_wheels_macos:
    name: Build wheels macos ${{ matrix.arch }} 
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false 
      matrix:  
        include:
          - os: macos-latest
            arch: x86_64
            CIBW_PLATFORM: macos  
            CIBW_ENVIRONMENT: "MACOSX_DEPLOYMENT_TARGET='11.0' CFLAGS='-march=skylake' CXXFLAGS='-march=skylake'"
          - os: macos-latest
            arch: x86_64
            CIBW_PLATFORM: macos  
            CIBW_ENVIRONMENT: "MACOSX_DEPLOYMENT_TARGET='10.16' CFLAGS='-march=haswell' CXXFLAGS='-march=haswell'"
          - os: macos-latest
            arch: arm64
            CIBW_PLATFORM: macos
            CIBW_ENVIRONMENT: ""
    steps:
      - uses: actions/checkout@v3
      - name: Install Dependency 
        shell: bash 
        run: |
          set -eux 
          brew install eigen nlohmann-json
      - name: Build wheels on ${{ matrix.CIBW_PLATFORM }} ${{matrix.arch}}
        uses: pypa/cibuildwheel@2.7.0
        env:
          CIBW_ENVIRONMENT: ${{ matrix.CIBW_ENVIRONMENT }}
          CIBW_PLATFORM:  ${{ matrix.CIBW_PLATFORM }}
          CIBW_ARCHS: ${{matrix.arch}}
          CIBW_PROJECT_REQUIRES_PYTHON: ">=3.7"
      - uses: actions/upload-artifact@v3
        with:
          name: WHEEL
          path: ./wheelhouse/*.whl
          retention-days: 30 
          
  build_wheels_windows:
    name: Build wheels windows ${{ matrix.arch }} 
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false 
      matrix:  
        include:
          - os: windows-latest
            arch: AMD64
            CIBW_PLATFORM: windows 
            CIBW_ENVIRONMENT: "CFLAGS='-march=haswell' CXXFLAGS='-march=haswell' CMAKE_TOOLCHAIN_FILE='C:/vcpkg/scripts/buildsystems/vcpkg.cmake'"
    steps:
      - uses: actions/checkout@v3       
      - name: Add msbuild to PATH
        if: ${{ matrix.os == 'windows-latest'}}
        uses: microsoft/setup-msbuild@v1.0.2
      - name: Prepare Cache 
        if: ${{ matrix.os == 'windows-latest'}}
        shell: bash 
        run: |
          set -eux
          ls  C:/vcpkg
          MSBuild.exe -version > msbuild_version.txt
          cat msbuild_version.txt
      - name: Cache vcpkg
        uses: actions/cache@v3
        if: ${{ matrix.os == 'windows-latest'}}
        with:
           path: |
             C:/Users/runneradmin/AppData/Local/vcpkg/archives
           key: ${{ matrix.os }}-vcpkg-${{ hashFiles('msbuild_version.txt') }}
           restore-keys: |
             ${{ matrix.os }}-vcpkg-${{ hashFiles('msbuild_version.txt') }}
             ${{ matrix.os }}-vcpkg
      - name: Install Dependency 
        shell: bash 
        run: |
          set -eux 
          vcpkg update
          vcpkg --triplet x64-windows-static install eigen3
          vcpkg --triplet x64-windows install eigen3
          vcpkg --triplet x64-windows-static install nlohmann-json
          vcpkg --triplet x64-windows install nlohmann-json
          vcpkg integrate install
      - name: Build wheels on ${{ matrix.CIBW_PLATFORM }} ${{matrix.arch}}
        uses: pypa/cibuildwheel@2.7.0
        env:
          CIBW_ENVIRONMENT: ${{ matrix.CIBW_ENVIRONMENT }}
          CIBW_PLATFORM:  ${{ matrix.CIBW_PLATFORM }}
          CIBW_ARCHS: ${{matrix.arch}}
          CIBW_PROJECT_REQUIRES_PYTHON: ">=3.7"
          
      - uses: actions/upload-artifact@v3
        with:
          name: WHEEL
          path: ./wheelhouse/*.whl
          retention-days: 30         
          
  upload_pypi:
    needs: [build_wheels_linux_x86_64, build_wheels_linux_aarch64, build_wheels_macos, build_wheels_windows, build_sdist]
    runs-on: ubuntu-latest
    if: ${{github.event_name == 'release'}}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: WHEEL
          path: ./dist
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: ${{ secrets.PYPI_USERNAME }}
          password: ${{ secrets.PYPI_PASSWORD }}
          packages_dir: ./dist
          verify_metadata: true
          skip_existing: false
          verbose: true
