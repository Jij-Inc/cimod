# Copyright 2025 Jij Inc.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[build-system]
requires = [
    "scikit-build-core>=0.10",
    "setuptools_scm[toml]",
    "pybind11",
    "oldest-supported-numpy",
]
build-backend = "scikit_build_core.build"

[tool.setuptools_scm]
write_to = "cimod/_version.py"

[tool.scikit-build]
minimum-version = "0.10"
strict-config = true
build.verbose = true
wheel.install-dir = "cimod"
wheel.packages = ["cimod"]
metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
sdist.include = ["cimod/_version.py"]

[project]
name = "jij-cimod"
dynamic = ["version"]
description = "C++ library for a binary (and polynomial) quadratic model."
requires-python = ">=3.9, <3.14"
license = {text = "Apache License 2.0"}
authors = [
    {name = "Jij Inc.", email = "info@openjij.org"}
]
readme = "README.md"
keywords = ["QUBO", "Ising", "optimization", "binary quadratic model", "BQM", "dimod"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: Apache Software License",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: C++",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: MacOS",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "numpy>=1.19.3,<2.4",
    "scipy>=1.5.4,<1.16",
    "dimod>=0.9.11,<0.13",
]

[project.optional-dependencies]
test = [
    "pytest",
    "pytest-mock",
    "pytest-cov",
    "pytest-randomly",
    "pytest-spec",
    "coverage",
]

[project.urls]
Homepage = "https://www.openjij.org"
Source = "https://github.com/OpenJij/cimod"
Documentation = "http://openjij.github.io/Cimod-Documentation/"
"Python Documentation" = "https://openjij.github.io/cimod/"

[tool.pytest.ini_options]
addopts = "--doctest-modules --color=yes --code-highlight=yes --cov-context=test --cov --cov-append --cov-report term --randomly-seed=last -v --capture=no"
testpaths = [
    "tests",
]
spec_header_format = "{module_path}:"
spec_test_format = "{result} {name}"
log_level = "INFO"
console_output_style = "count"
log_auto_indent = true
junit_logging = "all"

[tool.ruff]
line-length = 88
target-version = "py39"  # 最小サポート版（python_requires = >=3.9）
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "_skbuild",
    "memory-bank",
]

[tool.ruff.lint]
select = [
    "E4", "E7", "E9",  # pycodestyle errors
    "F",               # Pyflakes
    "I",               # isort
    "B",               # flake8-bugbear
    "C4",              # flake8-comprehensions
    "UP",              # pyupgrade
    "ANN",             # flake8-annotations（mypy代替：型アノテーション）
    "TCH",             # flake8-type-checking（pyright代替：型チェック最適化）
    "C90",             # mccabe（lizard代替：循環的複雑度）
    "S",               # bandit（セキュリティ検証）
    "BLE",             # flake8-blind-except
    "A",               # flake8-builtins
    "DTZ",             # flake8-datetimez
    "EM",              # flake8-errmsg
    "G",               # flake8-logging-format
    "N",               # pep8-naming
    "PIE",             # flake8-pie
    "T20",             # flake8-print
    "PT",              # flake8-pytest-style
    "Q",               # flake8-quotes
    "RET",             # flake8-return
    "SIM",             # flake8-simplify
    "ARG",             # flake8-unused-arguments
]
ignore = [
    "E501",    # 行長制限無視（既存設定：max-line-length = 999）
    "UP007",   # typing.Union → X | Y (Python 3.9互換性維持)
    "S101",    # assert使用許可（pytest用）
    "T20",     # print文許可（デバッグ用）
]

# 自動修正対象
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.isort]
combine-as-imports = true
lines-between-types = 1

[tool.ruff.format]
# black互換設定
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.cibuildwheel]
skip = ["cp36*", "cp37*", "cp38*", "*musllinux_x86_64", "*musllinux_aarch64", "pp*"]
build-verbosity = 1
dependency-versions = "latest"

[tool.cibuildwheel.linux]
archs = ["x86_64", "aarch64"]
build-frontend = "build"
repair-wheel-command = "auditwheel repair --lib-sdir . -w {dest_dir} {wheel}"

[tool.cibuildwheel.macos]
archs = ["x86_64", "arm64"]
build-frontend = "build"
before-build = [ 
    "pip install --upgrade pip wheel build pybind11 cmake ninja", 
]

[tool.cibuildwheel.windows]
archs = ["AMD64"]
before-build = [ 
    "pip install --upgrade pip wheel build cmake pybind11 delvewheel", 
]
repair-wheel-command = "delvewheel repair -w {dest_dir} {wheel}"
